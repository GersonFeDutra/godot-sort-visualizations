[gd_scene load_steps=17 format=2]

[ext_resource path="res://src/visualizations/QuickSortVisualization.tscn" type="PackedScene" id=1]
[ext_resource path="res://src/visualizations/InsertionSortVisualization.tscn" type="PackedScene" id=2]
[ext_resource path="res://assets/sprites/expand.png" type="Texture" id=4]
[ext_resource path="res://src/lib/resources/VizualizationData.gd" type="Script" id=5]

[sub_resource type="GDScript" id=1]
script/source = "tool
extends HBoxContainer

signal full_mode_cancelled

const VizualizationData = preload(\"res://src/lib/resources/VizualizationData.gd\")
export var quick_sort_refs: Resource = VizualizationData.new()
export var insertion_sort_refs: Resource = VizualizationData.new()
onready var quick_sort: Control = $QuickSort
onready var insertion_sort: Control = $InsertionSort


func _ready() -> void:
	quick_sort.toggle_controls_visibility()
	insertion_sort.toggle_controls_visibility()
	set_process_input(false)
	
	if Engine.is_editor_hint():
		set_process_unhandled_input(false)
		return
	
	quick_sort_refs.start(self, quick_sort)
	insertion_sort_refs.start(self, insertion_sort)


func _input(event: InputEvent) -> void:
	
	if event.is_action_pressed(\"ui_cancel\"):
		emit_signal(\"full_mode_cancelled\")


func _unhandled_input(event: InputEvent) -> void:
	
	if event.is_action_pressed(\"ui_accept\"):
		quick_sort.restart()
		insertion_sort.restart()
		get_tree().set_input_as_handled()


func highlight(node: Control) -> void:
	
	if node == quick_sort:
		insertion_sort.hide()
	else:
		quick_sort.hide()


func reset_highlight(node: Control) -> void:
	
	if node == quick_sort:
		insertion_sort.show()
	else:
		quick_sort.show()
"

[sub_resource type="Resource" id=2]
script = ExtResource( 5 )
expand_icon_path = NodePath("QuickSort/Anchor/TextureRect")
player_path = NodePath("QuickSort/AnimationPlayer")
overlay_path = NodePath("QuickSort/Anchor")
full_mode_player_path = NodePath("QuickSort/FullModeLabel/AnimationPlayer")

[sub_resource type="Resource" id=3]
script = ExtResource( 5 )
expand_icon_path = NodePath("InsertionSort/Anchor2/TextureRect")
player_path = NodePath("InsertionSort/Tween")
overlay_path = NodePath("InsertionSort/Anchor2")
full_mode_player_path = NodePath("InsertionSort/FullModeLabel2/AnimationPlayer")

[sub_resource type="Shader" id=4]
code = "shader_type canvas_item;
uniform vec4 color: hint_color = vec4(1.0);


void fragment()
{
	vec4 sample = texture(TEXTURE, UV);
	sample.a = (sample.r + sample.g + sample.b) / 3.0;
	sample = vec4(1.0) - sample;
	sample.rgb *= color.rgb;
	sample += vec4(1.0) * float(sample.a == 0.0);
	
	COLOR = sample;
}"

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 4 )
shader_param/color = Color( 0.576471, 0.52549, 0.827451, 1 )

[sub_resource type="Animation" id=6]
length = 3.0
tracks/0/type = "value"
tracks/0/path = NodePath(".:visible")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 3 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ true, false ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:modulate:a")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 1, 3 ),
"transitions": PoolRealArray( 2, 2, 1 ),
"update": 0,
"values": [ 1.0, 1.0, 0.0 ]
}

[sub_resource type="Animation" id=7]
tracks/0/type = "value"
tracks/0/path = NodePath(".:rect_size")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 2, 1 ),
"update": 3,
"values": [ Vector2( 460.8, 270 ), Vector2( 1024, 600 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:rect_position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 2, 1 ),
"update": 3,
"values": [ Vector2( 0, 0 ), Vector2( -45, -165 ) ]
}
tracks/2/type = "method"
tracks/2/path = NodePath("AnimationPlayer")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 1 ),
"transitions": PoolRealArray( 1 ),
"values": [ {
"args": [ "resized_in" ],
"method": "emit_signal"
} ]
}

[sub_resource type="Animation" id=8]
tracks/0/type = "value"
tracks/0/path = NodePath(".:rect_size")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 0.5, 1 ),
"update": 3,
"values": [ Vector2( 1024, 600 ), Vector2( 460.8, 270 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:rect_position")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 0.5, 1 ),
"update": 3,
"values": [ Vector2( -45, -165 ), Vector2( 0, 0 ) ]
}
tracks/2/type = "method"
tracks/2/path = NodePath("AnimationPlayer")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 1 ),
"transitions": PoolRealArray( 1 ),
"values": [ {
"args": [ "resized_out" ],
"method": "emit_signal"
} ]
}

[sub_resource type="GDScript" id=9]
script/source = "extends AnimationPlayer

# warning-ignore:unused_signal
signal resized_in
# warning-ignore:unused_signal
signal resized_out


func resize(is_in: bool) -> void:
	play(\"resize_visualization_in\" if is_in else \"resize_visualization_out\")
"

[sub_resource type="ShaderMaterial" id=10]
shader = SubResource( 4 )
shader_param/color = Color( 0.6, 0.54902, 0.831373, 1 )

[sub_resource type="Animation" id=11]
resource_name = "fade_out"
length = 3.0
tracks/0/type = "value"
tracks/0/path = NodePath(".:visible")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 3 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ true, false ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:modulate:a")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 1, 3 ),
"transitions": PoolRealArray( 1, 2, 1 ),
"update": 0,
"values": [ 1.0, 1.0, 0.0 ]
}

[sub_resource type="GDScript" id=12]
script/source = "extends Tween

signal resized_in
signal resized_out

const PROPERTY_SIZE := NodePath(\"rect_size\")
const PROPERTY_POSITION := NodePath(\"rect_position\")

export var animation_duration: float = 1.0
export var modulation_start: float = 1.0
export var target_path: NodePath
export var min_size := Vector2(460.8, 270)
export var max_size := Vector2(1024, 600)
export var from_position := Vector2(475, 0)
export var to_position := Vector2(-45, -165)

var was_in: bool
onready var target: Control = get_node(target_path)


func resize(is_in: bool) -> void:
	var is_ok: bool = stop_all()
	
	if is_in:
		was_in = false
		is_ok = is_ok and interpolate_property(target, PROPERTY_SIZE, target.rect_size, max_size,
				animation_duration, Tween.TRANS_SINE)
		is_ok = is_ok and interpolate_property(target, PROPERTY_POSITION, target.rect_position,
				to_position, animation_duration, Tween.TRANS_SINE)
	else:
		was_in = true
		is_ok = is_ok and interpolate_property(target, PROPERTY_SIZE, target.rect_size, min_size,
				animation_duration, Tween.TRANS_SINE)
		is_ok = is_ok and interpolate_property(target, PROPERTY_POSITION, target.rect_position,
				from_position, animation_duration, Tween.TRANS_SINE)
	
	is_ok = is_ok and start()
	
	if not is_ok:
		push_warning(\"Coldn't start animation.\")


func _on_Tween_tween_completed(_object: Object, _key: NodePath) -> void:
	
	if was_in:
		emit_signal(\"resized_out\")
	else:
		emit_signal(\"resized_in\")
"

[node name="MainMenu" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Visualizations" type="HBoxContainer" parent="."]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -467.5
margin_top = -135.0
margin_right = 467.5
margin_bottom = 135.0
custom_constants/separation = 15
script = SubResource( 1 )
__meta__ = {
"_edit_use_anchors_": false
}
quick_sort_refs = SubResource( 2 )
insertion_sort_refs = SubResource( 3 )

[node name="QuickSort" parent="Visualizations" instance=ExtResource( 1 )]
anchor_right = 0.0
anchor_bottom = 0.0
margin_left = 0.0
margin_right = 460.8
margin_bottom = 270.0
rect_min_size = Vector2( 460.8, 270 )
hint_tooltip = "Clique para expandir"
mouse_filter = 1
colors = {
"base": Color( 1, 1, 0.901961, 1 ),
"marker": Color( 1, 0.39, 0.28, 1 ),
"multiply": Color( 0.419608, 0.34902, 0.8, 1 ),
"pivot": Color( 0.5, 1, 0.83, 1 ),
"wall": Color( 1, 0.976471, 0.364706, 1 )
}
invert_shades = {
"blue": false,
"green": false,
"red": false
}

[node name="Label" type="Label" parent="Visualizations/QuickSort"]
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
margin_left = -77.1299
margin_right = 75.8701
margin_bottom = 20.0
text = "Quck Sort Vizualization"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Anchor" type="Control" parent="Visualizations/QuickSort"]
anchor_left = 1.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -29.8
margin_top = -30.0
margin_right = 0.200012
mouse_filter = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="TextureRect" type="TextureRect" parent="Visualizations/QuickSort/Anchor"]
material = SubResource( 5 )
anchor_right = 1.0
anchor_bottom = 1.0
rect_scale = Vector2( 0.04, 0.04 )
texture = ExtResource( 4 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="FullModeLabel" type="Label" parent="Visualizations/QuickSort"]
visible = false
modulate = Color( 1, 1, 1, 0 )
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -90.5
margin_top = -10.0
margin_right = 90.5
margin_bottom = 10.0
text = "Pressione ESC para retornar"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="AnimationPlayer" type="AnimationPlayer" parent="Visualizations/QuickSort/FullModeLabel"]
anims/fade_out = SubResource( 6 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="Visualizations/QuickSort"]
anims/resize_visualization_in = SubResource( 7 )
anims/resize_visualization_out = SubResource( 8 )
script = SubResource( 9 )

[node name="InsertionSort" parent="Visualizations" instance=ExtResource( 2 )]
anchor_right = 0.0
anchor_bottom = 0.0
margin_left = 475.0
margin_right = 935.8
margin_bottom = 270.0
rect_min_size = Vector2( 460.8, 270 )
hint_tooltip = "Clique para expandir"
mouse_filter = 1
colors = {
"base": Color( 1, 1, 0.901961, 1 ),
"marker": Color( 1, 0.39, 0.28, 1 ),
"multiply": Color( 0.419608, 0.34902, 0.8, 1 ),
"pivot": Color( 0.5, 1, 0.83, 1 ),
"wall": Color( 1, 0.976471, 0.364706, 1 )
}
invert_shades = {
"blue": false,
"green": false,
"red": false
}

[node name="Label" type="Label" parent="Visualizations/InsertionSort"]
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
margin_left = -88.4
margin_right = 89.6
margin_bottom = 20.0
text = "Insertion Sort Vizualization"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Anchor2" type="Control" parent="Visualizations/InsertionSort"]
anchor_left = 1.0
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -30.0
margin_top = -30.0
mouse_filter = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="TextureRect" type="TextureRect" parent="Visualizations/InsertionSort/Anchor2"]
material = SubResource( 10 )
anchor_right = 1.0
anchor_bottom = 1.0
rect_scale = Vector2( 0.04, 0.04 )
texture = ExtResource( 4 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="FullModeLabel2" type="Label" parent="Visualizations/InsertionSort"]
visible = false
modulate = Color( 1, 1, 1, 0 )
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -90.5
margin_top = -10.0
margin_right = 90.5
margin_bottom = 10.0
text = "Pressione ESC para retornar"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="AnimationPlayer" type="AnimationPlayer" parent="Visualizations/InsertionSort/FullModeLabel2"]
anims/fade_out = SubResource( 11 )

[node name="Tween" type="Tween" parent="Visualizations/InsertionSort"]
script = SubResource( 12 )
target_path = NodePath("..")

[connection signal="tween_completed" from="Visualizations/InsertionSort/Tween" to="Visualizations/InsertionSort/Tween" method="_on_Tween_tween_completed"]
